摘要：&nbsp;
互联网成为了当今世界人们对外交流，快速获取、发布和传递信息的最常用也是最便捷的渠道，互联网技术在人们生活、工作与学习的方方面面都发挥着重要的作用。而博客网站正适应这种人际与技术交流方式的改变，满足个人技术与信息共享的需求。本文对博客的功能与需求进行了完整分析，设计出了一个简单、易用的个人博客系统。为了提高开发效率和代码复用率，本系统使用采用SPA（单页面应用）思想的vue.js进行系统的开发。Vue.js是一个轻量级的基于MVVM模式的渐进式框架。vue的组件化与数据绑定的思想，在很大程度上简化了前端开发的复杂度。后端将node.js技术与express结合使用，以创建符合RESTful API设计规范的接口。&nbsp;
Abstract:
Abstract:the Internet has become the most common and convenient channel for people to communicate with others in the world.The Internet plays an important role in people’s life， work and study.Blog sites are adapting to this change in interpersonal and technical communication， to meet the needs of personal technology and information sharing.This article has carried on the complete analysis to the blog function and the demand， has designed a simple， easy to use personal blog system.In order to improve the development efficiency and code reuse rate， This system uses the idea of SPA (single page application) vue.Js to develop system .Vue.js is a lightweight progressive framework based on the MVVM pattern.The idea of component and data binding simplifies the complexity of front-end development.The back end USES node.js technology in conjunction with express to create interfaces that conform to RESTful API design specifications.The front and rear ends are separated and decoupled effectively.
关键词
开发背景8
1.1博客的背景8
1.2系统设计的意义9
系统相关技术介绍9
SPA（Single Page App）9
单页应用9
与传统网页的比较9
单页应用的好与坏11
NPM11
2.1vue.js12
2.1.1介绍12
Vue-cli12
2.2.1声明式渲染13
2.2.1创建实例14
2.2.2 vue响应式原理16
2.2.5 与其他框架相比优点17
2.2路由17
2.3状态管理17
axios :19
2.4node.js19
2.4.1Node.js模块系统20
Node.js Express 框架20
2.4Node.js GET/POST请求20
2.3Node.js RESTful API20
2.4Node.js 连接 MySQL20
系统分析20
3.1需求分析20
3.23.2 可行性分析21
系统设计21
前台21
后台21
数据库设计21
概念结构设计21
逻辑结构设计21
系统实现22
英文题目&nbsp;
有道的：&nbsp;
序言&nbsp;
Blog（博客）作为一种个人知识管理工具，在人们日常生活中越来越盛行&nbsp;Blog技术缔造了“博客”文化。个人博客是当今网络的热点，更多的人会与其他朋友或者观众分享所见所闻，而博客就是托管他们的平台。因此，开发一个高效的通用博客系统，使越来越多的人更能方便快捷的向他人展示自己。&nbsp;
博客(Blogger)的出现，使我们在互联网世界，第一次有了知识积累和文化指向。使人类由粗放的数字化生存，过渡为个人化的精确的目录式生存。博客们将工作、生活和学习融为一体，通过博客日志( Blog)，将日常的思想精华及时记录并发布，萃取并链接全球最有价值、最相关、最有意思的信息与资源。在其形成的博客媒介下，更多的知识工作者能够零距离、零壁垒地汲取这些最鲜活的思想。博客传播的出现，标志着以“信息共享”为特征的第一代门户之后，追求“思想共享”为特征的第二代门户正在浮现，互联网开始真正凸现无穷的知识价值。博客传播是网络传播领域出现的个性鲜明的传播现象，其出现改变了网络传播的秩序，重新划分了网络传播的界限。博客的出现还打破了长久以来传统媒体对媒介所传播内容的控制，使得由美国社会心理学家、传播学四大先驱之一的卢因1947年率先提出的“把关人”理论受到强烈冲击，以至于更有甚者宣称，“守门人”时代结束。一个理论的建立，在某种意义上讲是现实实践的结论升华，它反过来必然要指导实践活动。一个理论的结束，对于现实生活是具有重大意义的。博客技术下发展起来的博客群体、博客媒介和博客传播，是否将重新定义互联网的界限...&nbsp;
博客是以自由、开放和共享为文化特征，通过图文音象等表现形式，围绕个人网络存在的五大功能，提供存取读写、组织沟通、评价交换等服务的一种社会化个人服务模式。它并不是纯粹的技术创新，但确是一种逐渐演变的网络应用，一种形式的变化。从某种意义上说，也是一种计算机源代码开放，它像一部傻瓜照相机一样，让所有使用者都成了程序员，这就大大消解了网络与人的距离，也消解了人与人的距离。博客的全民性，让它的传播方式成为所有人对所有人的传播。然而，博客并不如表面般繁荣，当博客毫不掩饰地在大众面前喧闹的时候，接踵而来的问题使得博客乱了方寸。本文以非独立博客网站为研究对象，从传者、受者、内容、博客服务平台以及互动反馈等几个方面对博客进行分析，并从中得出了以下结论:博客参与者的盲目性导致了博客行为过程中的迷茫与厌倦;由于进入的零门槛和缺少监管，彻底颠覆互联网既有模式的博客，变成了新的信息垃圾场。博客正遭受低俗肤浅成风、网络侵权等因素的困扰；博客平台在服务、管理以及价值导向上忽略了用户体验；博客间的互动也呈现两个极端的尴尬局面。从总体上说，我国博客正处在一个混乱期，隐藏在虚热表面下的是种种的危机。&nbsp;
开发背景&nbsp;
1.1博客的背景&nbsp;
Blog是继 Email， BBS和ICQ之后出现的第四种网络沟通方式，它是互联网时代的个人“读者文摘”，更代表着新的生活方式、新的工作方式和新的学习方式。简言之， Blog就是以网络作为载体，简易迅速便捷地发布自己的心得，及时有效轻松地与他人进行交流，是一个丰富多彩的展示个性化的综合性平台。&nbsp;
博客的分类有很多。比如，按功能分：基本博客、微型博客；按用户分：个人博客、企业博客；按存在方式分：附属博客，托管博客，独立博客。本系统就是按用户划分的个人博客。
博客有以下特点：&nbsp;
简单的操作是博客开发的动力。这是博客受到如此众多网友欢迎的最大特点。许多博客托管网站使用的口号就是“在一分钟内轻松拥有一个博客”。&nbsp;
2、不断更新是博客壮大的催化剂。现代社会，信息传递的速度非常快速，博客的更新就如逆水行舟，在时代的洪流中没有原地不动，只用前进与退步，不及时更新的博客很快就会被淹没在技术前进的道路上。&nbsp;
3、开放互动是博客传播的推动剂。互联网赋予了博客开放性的特点，那么博客也就不在再是一个单纯的私人空间。访问者和其他博主给我们的文章撰写留言或评论，如果我们回复，并通过链接地址对他们回访，则可以实现互动效果。因此，只要善于利用博客开放互动的特点，就可以将博客用于交流和推广，使之最终形成一个固定的圈子。&nbsp;
4、展示个性是博客出彩的原动力。作为博主可以在博客的界面设计，功能搭配与文章喜好上展现出自己的独有的个人性格特点，吸引同类或者欣赏此类性格的访问者。
1.2系统设计的意义&nbsp;
在科技快速进步的今天，互联网成为了当今世界人们对外交流，快速获取、发布和传递信息的最常用也是最便捷的渠道，互联网在人们的日常生活中发挥着举足轻重的作用。当今时代，技术日新月异，作为互联网技术从业者，需要不断的汲取新知识，走在技术的前沿，但是大部分新技术文档与书籍都是英文，对于英语能力有限的互联网技术从业者，不可避免的需要借助搜素引擎或者其他人的帮助，在搜索引擎的搜索结果中大部分的技术问题解决方案的贡献者都来自博客，所以此次毕业设计自己也想要做一个记录自己学习与工作过程的心得体会的博客网站，去适应这种人际与技术交流方式的改变，同时也实现个人技术与信息共享的需求。&nbsp;
系统相关技术介绍&nbsp;
SPA（Single Page App）&nbsp;
单页应用&nbsp;
单页应用（英语：Single Page Application， SPA）是通过动态重写当前页面与用户交互的Web应用程序或网站的模型。避免了传统网页模型的打断用户体验的页面切换方式，也避免了不断的加载整个新页面，减轻了服务器的负担。在单页应用中，通过加载单个页面来检索所有必需的代码（HTML，JavaScript和CSS）。 或者根据需要动态加载适当的资源并通过路由程序将它们添加到页面中（通常是响应用户操作）。网站所有的页面内容都包含在这个主页面中。但是在实际开发的时候，还是会分开写（页面片段）。SPA支持丰富的客户端功能，很少需要重新加载整个页面，因此当用户执行操作或在应用的各个区域之间导航时，无需重新加载整个页面。因此，它的加载速度更快，在后台提取数据，对单个用户操作的响应更快。
与传统网页的比较&nbsp;
为了更好的理解什么是单页应用，我们先来了解传统的网页应用。传统网页应用的工作模式如下图&nbsp;
/&nbsp;
传统网页应用的工作模式&nbsp;
此种方式作为网页应用的传统形式长久不衰，很多流行的开发框架都以之作为范式设计的。比如 Ruby on Rails，Spring MVC，Express 等等&nbsp;
/&nbsp;
传统网页应用的工作分布&nbsp;
在传统的WEB应用中，浏览器作为展示层view，mode与controller等更多计算与调度的例如路由跳转，数据请求等都是由服务器端进行的。
在传统的网页应用中，浏览器更多的是充当一个展示层，路由处理、服务调用、页面跳转流程都由服务端来处理。即 MVC 都放在服务器端，而 V 作为用户界面则通过网络发送到浏览器端，作为 UI 与用户交互。&nbsp;
这样的范式有以下特点：&nbsp;
服务端负担过重，由于 MVC存在于服务器上，因此开发资源的重点和此类应用程序的开发偏向于后端，并且后端工程师通常会领导整个项目的开发;
页面经常刷新，当页面的功能发生变化时，页面就需要进行刷新，导致资源的浪费。而且导致用户需要花费额外的时间等待页面刷新，用户体验不佳。&nbsp;
单页应用的工作模式如下图：&nbsp;
/&nbsp;
单页应用的工作分布&nbsp;
1控制器前置，单页应用将对页面路由的处理放在浏览器端，即直接响应浏览器端的浏览地址的变化，将变化通知到与之对应的路由，以此来向用户呈现对应的界面。&nbsp;
2小组件为功能元件。单页应用以小的组件作为功能元件，在路由变化时，不再刷新整个页面，而是将这些小组件进行组合以实现页面的改变。&nbsp;
3数据层前置。使用JSON发送应用数据的方式，会在HTML的视图层和应用程序层之间创建一种分离。这便使得表示层与应用层相分离，浏览器端形成一层实实在在的数据层，而服务端则退化成了完全的数据 API，以方便不同的开发人员去独立地开发每一个层面。
单页应用的好与坏&nbsp;
每一种技术都有优缺点，单页应用也不例外。单页面开发的优点：&nbsp;
1良好的用户体验：用户无需刷新页面，减少HTTP的请求造成的时间损耗，获取数据也是通过Ajax异步获取。
2前后端分离：前端负责界面显示，后端负责数据存储和计算，使得前后端的业务与数据逻辑更加清晰明了。&nbsp;
3减轻服务端压力：在单叶应用中服务器只需要提供数据的API接口，不需要知道前端的代码实现，服务器不再负责页面逻辑和页面拼接，可以将服务器的性能使用到极致。
4共享一组后端程序代码：同一组后端程序代码，可以在不经修改的情况下就可以适用于三端Web、手机、平板。&nbsp;
5组件共享：对于使用到同样功能或者同样展示型组件的多端应用可以在项目中开辟公共组件的存储文件，将所有的公共组件都放入其中，以供多端使用，简化了代码的重复性。&nbsp;
单页面开发的缺点：&nbsp;
1首屏加载过慢：当第一次加载单页面时，需要组合所有页面所依赖的css和js 并统一加载它们。所以css和js文件会较大，会在一定程度上影响页面加载时间。&nbsp;
2 SEO：由于页面数据都是前端异步加载出来的，浏览器看到的是所有结构加载出来之前的页面，找不到meat标签或者任何可用的文字，不利于搜索引擎的抓取。&nbsp;
如果应用要求包括超出了典型 HTML 所能提供的丰富的功能，则应选择 SPA 样式应用程序。
NPM&nbsp;
由于使用到的技术都是通过npm来安装的，所以先来介绍npm到底是什么：&nbsp;
NPM 即 Node 包管理器（Node Package Manager）。它是一个以 Node.js为默认环境 ，使用JavaScript 编写的软件包管理系统。在 Node.js 0.6.3 版本之前npm需要自行安装，但是node.js 0.6.3之后NPM 被自动附带在安装包中。
使用npm安装包的命令是：npm install 包名 [--save-dev]
--save与-dev都是可选的&nbsp;
--save:将安装的包放在依赖项dependencies中&nbsp;
--save-dev:安装的包将出现在devDependencies中&nbsp;
2.1vue.js&nbsp;
2.1.1介绍&nbsp;
Vue.js是尤玉溪编写的用来构建用户界面的渐进式 JavaScript 框架 。与其它大型框架不同的是，Vue 被设计为可以自下而上应用。Vue.js的核心库只关注视图层，使其不仅易于上手，而且还便于与第三方库或现有项目整合。另一方面，当与现代化工具链和各种支持类库结合使用时，Vue.js 也完全能够为复杂的单页应用提供驱动。
/&nbsp;
Vue.js中View与Model的交互原理&nbsp;
此图不仅描述了MVVM模式（Model-View_ViewModel），还描述了在Vue.js中ViewModel是如何和View以及Model进行交互的。&nbsp;
ViewModel是Vue.js的核心，它是一个Vue实例。Vue的实例是绑定在HTML的元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。&nbsp;
当创建了ViewModel后，双向绑定是如何达成的呢？&nbsp;
DOM Listener和Data Bindings这两个工具是实现双向绑定的关键。
在View侧也就是页面上，DOM Listeners工具会监测页面上DOM结构与元素的变化，一旦发生变化，就会去更改Model中的数据。&nbsp;
在Model侧也就是传统意义上的服务器端上，当我们将Model中的数据进行更新时，Data Bindings工具会将数据变化同时到页面，从而更新页面中的DOM元素。
2.2.1 组件化应用构建&nbsp;
组件系统是 Vue 的重要概念，它是一种抽象的概念，此设计允许我们使用小型的、独立的和通常可复用的组件通过组合去构建大型应用。在WEB网页制作中几乎任意类型的应用界面都可以抽象为一个组件树：&nbsp;
/&nbsp;
页面结构的树形示意&nbsp;
2.2.2 vue响应式原理&nbsp;
Vue 最独特的功能之一是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。这使得状态管理非常简单直接。Vue 响应式系统的底层的细节如下图：&nbsp;
/&nbsp;
vue响应式原理&nbsp;
vue如何追踪变化呢？将普通的 JavaScript 对象传给 Vue 实例的 data 选项时，Vue 将迭代此对象所有的属性，并使用 Object.defineProperty 将所有这些属性转为 getter/setter。由于Object.defineProperty 在ES5中是一个无法 shim 的特性导致Vue.js不支持 IE8 及以下低版本的浏览器。这些 getter/setter 对用户是不可见的，但是内部 Vue 通过它们跟踪依赖关系，在属性被访问和修改时通知变化。每个组件实例都有一个相应的 watcher实例对象，该对象在组件呈现的过程将该属性记录为依赖项。稍后，当调用依赖项的 setter时，会通知 watcher重新计算，从而更新其关联的组件。这就是vue响应式更新组件的原理。&nbsp;
2.2.5 与其他框架相比优点&nbsp;
1易用。只需要已学习了HTML、CSS、JavaScript，就可以阅读vue开发指南并开始构建应用程序。不像其他前端框架一样有比较高的使用门槛。&nbsp;
2.灵活。一个繁荣的生态系统，可以在库和完整的框架之间进行自行扩展。
Vue-cli&nbsp;
Vue- cli是 vue官方开发的脚手架工具，基于 webpack构建，很好地规范了其开发生态，开发者只需要关注业务代码本身，而不必操心复杂的 webpack配置，可以说是对开发人员尤其是新手是相当友好的。&nbsp;
Vue CLI 提供了以下功能：&nbsp;
1通过 @vue/cli 搭建交互式的项目脚手架。&nbsp;
2通过 @vue/cli + @vue/cli-service-global 快速开始零配置原型开发。&nbsp;
3一个运行时依赖 (@vue/cli-service)，该依赖：&nbsp;
1.可升级；&nbsp;
2基于 webpack 构建，并带有合理的默认配置；&nbsp;
3可以通过项目内存在的配置文件进行自主配置；&nbsp;
4可以通过插件进行扩展。&nbsp;
5丰富的官方插件集，集成了前端生态中的最佳工具。&nbsp;
6用于创建和管理 Vue.js 项目的完全图形用户界面。&nbsp;
上边提到了webpack，那么什么是webpack呢？请看以下介绍：&nbsp;
webpack就是前端资源模块化管理和打包工具，它可以将很多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源，还可以将按需加载的模块进行代码分割，等到实际需要的时候再异步加载（如图），而要它自动实现这些功能，你得提前编辑好配置文件。&nbsp;
/&nbsp;
用vue项目来举例：浏览器它是只认识js，不认识vue的。我们编写的代码后缀主要是.vue的，而html、js、css甚至是图片资源可能是在每个.vue文件中；并且由于组件化，每一个.vue文件之间还有错综复杂的关系。所以项目要被浏览器识别，我们就要使用webpack将它们打包成js文件以及相应的资源文件。
WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到 JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（ less，TypeScript等），并将其打包为合适的格式以供浏览器使用。&nbsp;
2.2路由&nbsp;
本系统的前端路由使用vue-router来实现。&nbsp;
vue-router是一个前端路由管理器，是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来。传统的页面应用，是用一些超链接来实现页面切换和跳转的。在vue-router单页面应用中，则是路径之间的切换，也就是组件的切换。&nbsp;
2.3状态管理&nbsp;
Vuex是一个专为Vue.js设计的状态管理库，可利用Vue.js的细粒度数据响应机制实现高效的状态更新。本系统使用vuex来进行系统组件之前公共数据的管理。&nbsp;
Vuex是一种集中的状态管理模型。在模块化开发过程中，我们使用组件作为模块单元。 这确保了我们模块之间的变量函数名称不会发生冲突，但有时我们需要在组件之间共享一些数据或状态，通常使用参数。 但是传参的做法至少有两个弊端，一个是麻烦（特别是当需要传递很多参数时）， 其次，管理和冗余并不容易（将参数传递给多个组件需要多个参数列表。 而且容易出错)。 vuex提供的集中管理通过集中要共享的数据或状态来解决此问题。其他组件根据需要访问更改，大大提高了可维护性和开发效率。
/&nbsp;
vuex状态管理流程&nbsp;
所有 store 中 state 的改变，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的 mutation 将会发生，以及它们是如何被触发。当错误出现时，我们现在也会有一个 log 记录 bug 之前发生了什么。&nbsp;
axios :&nbsp;
2.4node.js&nbsp;
Node.js是一个事件驱动I/O的能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。 Node.js由Node.js Foundation 持有并维护，并与Linux Foundation建立了合作伙伴关系。Node.js使用Google的V8引擎运行代码来提高性能并优化应用程序吞吐量，并使用事件驱动，非阻塞和异步输入和输出模型等技术进行扩展。
Node.js大多数基本模块都用JavaScript编写的。在Node.js出现之前，JavaScript通常作为客户端程序设计语言使用，以JavaScript写出的程序常在用户的浏览器上运行。Node.js的出现使JavaScript也能用于服务端编程。Node.js含有一系列内置模块，使得程序可以脱离Apache HTTP Server或IIS，作为独立服务器运行。&nbsp;
2.4.1Node.js模块系统&nbsp;
http://www.runoob.com/nodejs/nodejs-module-system.html&nbsp;
什么是模块系统&nbsp;
什么是模块?
模块是构建应用程序的基础，是Node.js 应用程序的基本组成部分，也使得函数和变量私有化，不直接对外暴露出来。一个 Node.js 文件就是一个模块每个模块都有自己的作用域，当我们使用 var 来申明的一个变量，他并不是全局的，而是属于当前模块下。 接下来我们就要介绍Node的模块化系统和它最常用的模式。JavaScript起初并没有内置的模块系统，CommonJS社区为了使JavaScript可以提供一个类似Python、Ruby等的标准库，自己实现了一套API填补了JavaScript没有内置模块的空白。
CommonJS规范本身涵盖了模块、二进制、 Buffer、文件系统、包管理等内容，而 NodeJS正是借鉴了 CommonJS规范的模块系统，自身实现了一套非常易用的模块系统。CommonJS对模块的定义可分为三部分：模块引用（require）、模块定义（exports、module）、模块标识。&nbsp;
为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。模块可以通过 module.exports 自由地隐藏内部实现、对外暴露接口 。我们只需要通过 require，就能实现模块加载引入。&nbsp;
在Node.js 中创建模块&nbsp;
// add.js&nbsp;
functionadd(a，b){&nbsp;
returna+b}&nbsp;
module.exports={&nbsp;
add}&nbsp;
当我们需要在其他地方使用 add 方法时，比如：&nbsp;
// app.jsconst{add}=require(’./add’)&nbsp;
console.log(add(1，2))// 3&nbsp;
我们只需要调用 require(’./add’) 就能实现对模块的引入。&nbsp;
Node.js Express 框架&nbsp;
Express 是一个简洁而灵活的 node.js Web应用框架， 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。Express 框架核心特性如下：&nbsp;
1可以设置中间件来响应 HTTP 请求。&nbsp;
2定义了路由表用于执行不同的 HTTP 请求动作。&nbsp;
3可以通过向模板传递参数来动态渲染 HTML 页面。&nbsp;
4丰富的HTTP工具以及来自Connect框架的中间件随取随用，创建强健、友好的API变得快速又简单&nbsp;
5 性能更好。Express 在node.js 上扩展了Web应用所需的功能&nbsp;
安装 Express 并将其保存到依赖列表中：&nbsp;
$ npm install express --save&nbsp;
2.4Node.js GET/POST请求&nbsp;
http://www.runoob.com/nodejs/node-js-get-post.html&nbsp;
在很多场景中，我们的服务器都需要跟用户的浏览器打交道，如表单提交。表单提交到服务器一般都使用 GET/POST 。&nbsp;
Node.js获取GET请求内容：由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。node.js 中 url 模块中的 parse 函数提供了这个功能。解析函数的作用是解析url，并以json格式返回数组&nbsp;
/&nbsp;
获取get参数&nbsp;
获取 POST 请求内容：POST 请求的内容全部的都在请求体中，http.ServerRequest 并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的 POST请求会大大消耗服务器的资源，所以 node. js默认是不会解析请求体的，当你需要的时候，需要手动来做。&nbsp;
/&nbsp;
获取post请求&nbsp;
2.3Node.js RESTful API&nbsp;
REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。他在论文中提到：”我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。” 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。&nbsp;
REST本身并没有创造新的技术、组件或服务，而隐藏在 RESTful背后的理念就是使用 Web的现有特征和能力，更好地使用现有 Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深， 但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。所以我们这里描述的REST也是通过HTTP实现的REST。&nbsp;
2.4Node.js 连接 MySQL&nbsp;
连接数据库代码如图所示，其中connect()方法用来创建连接，end()方法用来关闭连接，query()方法用来向mysql传递参数。&nbsp;
/&nbsp;
连接mysql数据库&nbsp;
系统分析&nbsp;
3.1需求分析&nbsp;
想要完成一个系统，需求分析是第一步，明确系统是什么，要干什么，完成那些功能。&nbsp;
本系统需求如下：&nbsp;
博客的游客用户可以在网站上对文章进行常规访问。以及在通过注册登录后，可以进行文章的发布与发表评论。博主可以通过后台对用户进行管理以及文章与文章分类添加、删除、修改。&nbsp;
针对博客系统的以上需求，总结出如下信息：&nbsp;
1.个人博客的用户分为游客、普通用户和超级管理用户。
2.身为超级管理员可以用户，文章，文章分类和评论进行管理。
3.博客的超级管理员涉及对博客的文章类型管理、文章管理、评论管理、和用户管理。
4.注册用户可以阅读文章、发表评论，游客只能进行文章的阅读。
5.文章类型与文章之间形成一对多的关系，文章与评论之间也是一对多的关系。
3.23.2 可行性分析
可行性分析( Feasibility Analysis)是在系统调查的基础上，针对新系统的开发是否具备必要性和可能性，对新系统的开发从技术、经济、社会的方面进行分析和研究，以避免投资失误，保证新系统的开发成功。可行性研究的目的就是用最小的代价在尽可能短的时间内确定问题是否能够解决。为了确定开发具有可行性，对本系统主要进行了以下几个方面的分析。
技术可行性分析：本人对于VUE.JS与NODE.JS在实习中有所接触，对这方面有所了解，所以从技术方面看做个人博客是可行的。
时间可行性：现在博客技术已经非常成熟，多方面的问题都有成熟的解决方案，结合技术可行性，在预定的时间里可以完成此次设计。
系统设计
/
个人博客的总体规划图如下：
/
前台
在前台，游客浏览首页，文章详情页，文章列表与文章分类，注册用户在此基础上可以对文章进行评论。
/
后台
超级管理员通过预设的账号登录后台。超级管理员可以在后台对文章进行增删查改，对文章分类进行增删查改，对评论进行查看和删除；对注册用户进行管理，可以进行的操作有查看和封禁。
/
数据库设计
数据库是个人博客设计的主要部分，本系统选用了mysql数据库，使用navicat premium可视化数据库管理工具进行数据库的设计与管理。
概念结构设计
/
对于属性比较多的实体，在E_R图中只列出了部分属性以做示意，具体的详细设计将体现在数据库表的结构中。如下图所以：
数据库概念结构e-r图
逻辑结构设计
/
根据数据的概念结构设计为基础，设计出如下表结构
（1）用户表管理用户的信息。表结构设计如下：
字段名称
数据类型
字段长度
说明
id
int
5
用户ID(主键)
account
varchar
50
登录名
password
varchar
50
密码
pwd_salt
int
5
密码加盐随机数
nickname
varchar
50
用户名字
birthday
date
20
出生日期
gender
tinyint
1
性别
introduce
varchar
200
个人介绍
status
tinyint
1
用户状态
role_id
int
5
角色id
角色表
字段名称
数据类型
字段长度
说明
id
int
5
角色ID(主键)
name
varchar
20
角色名称
dest
varchar
20
角色描述
permission_list
varchar
255
权限列表
文章表
字段名称
数据类型
字段长度
说明
id
int
5
文章ID(主键)
type
int
20
文章类型
title
varchar
20
文章标题
content
mediumtext
255
文章内容
author_id
int
5
文章作者id
status
tinyint
1
文章状态
views
int
20
文章浏览量
Comments
int
20
文章评论数
createtime
int
20
文章创建时间
updatetime
int
20
文章更新时间
dest
varchar
100
对文章的简要描述
文章分类表
字段名称
数据类型
字段长度
说明
id
int
5
角色ID(主键)
name
varchar
20
角色名称
dest
varchar
20
角色描述
permission_list
varchar
255
权限列表
各个表之间的关系如下图：
数据库模型
接口
http://www.shirdon.com/?p=426 参考网址
系统实现
文献：
[1]李宇.前后端分离框架在软件设计中的应用[J].无线互联科技.2018，15(17):41-42.
[2]汪彤.基于Node.js的图书共享平台的设计与实现[D].北京邮电大学.2018.
[3]梁灏.Vue.js实战[M].清华大学出版社.2017.
[4]麦冬.轻量级响应式框架Vue.js应用分析[J].信息与电脑(理论版).2017，(7):58-59.
[5]刘红卫.利用Node.js开发前后端分离的系统——以图书馆地方文献系统为例[J].天津科技.2018，45(7):67-70.
[6]茆玉庭.基于Node.js和WebSocket的即时通信系统的设计与实现[D].南京邮电大学.2018.
[7]程桂花，沈炜，何松林，张珂杰.Node.js中Express框架路由机制的研究[J].工业控制计算机.2016，29(8):101-102.
[8]王伶俐，张传国.基于NodeJS+Express框架的轻应用定制平台的设计与实现[J].计算机科学.2017，44(z2):596-599.
[9]聂鑫.前端编程与数据库设计的合理运用[J].信息与电脑(理论版).2011，(2):100.
[10]陈帅，关玉蓉.基于Java Web的奖助学金系统设计与实现[J].科技广场.2017，(3):190-192.
[11]李玉.Vue框架的前端交互性能优化解决方案的研究[D].华中科技大学.2017
[12]邹竞莹.Node.JS博客系统的设计与实现[D].黑龙江大学.2016.
[13]旷志光，纪婷婷，吴小丽.基于Vue.js的后台单页应用管理系统的研究与实现[J].现代计算机.2017，(30):51-55.
[14]邓雯婷.基于Vue.js构建单页面GIS应用的方法研究[J].科技创新与应用.2018，（14）：5-7，10.
[15]朱二华.基于Vue.js的Web前端应用研究[J].科技与创新.2017，(20):119-121.
[16]王志任.基于Vue.js的开发平台的设计与实现[D].广东工业大学.2018.
